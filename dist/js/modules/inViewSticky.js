"use strict";function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_unsupportedIterableToArray(r,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(r,t){var e=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=e){var n,a,o,i,l=[],u=!0,c=!1;try{if(o=(e=e.call(r)).next,0===t){if(Object(e)!==e)return;u=!1}else for(;!(u=(n=o.call(e)).done)&&(l.push(n.value),l.length!==t);u=!0);}catch(r){c=!0,a=r}finally{try{if(!u&&null!=e.return&&(i=e.return(),Object(i)!==i))return}finally{if(c)throw a}}return l}}function _arrayWithHoles(r){if(Array.isArray(r))return r}function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,t){if(r){if("string"==typeof r)return _arrayLikeToArray(r,t);var e=Object.prototype.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(r,t):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,n=new Array(t);e<t;e++)n[e]=r[e];return n}var inViewSticky=function(){var r=_toConsumableArray(document.querySelectorAll('[data-scroll-inview="true"], [data-inview-target]:not([data-inview-target=""])')).reduce((function(r,t){var e=t.getAttribute("data-inview-threshold")||"0";return(r[e]=r[e]||[]).push(t),r}),{});Object.entries(r).forEach((function(r){var t=_slicedToArray(r,2),e=t[0],n=t[1],a=new IntersectionObserver((function(r){r.forEach((function(r){var t=document.querySelectorAll(r.target.getAttribute("data-inview-target"))||[],e=r.isIntersecting,n=r.boundingClientRect.y<=0&&!e;[r.target].concat(_toConsumableArray(t)).forEach((function(r){["passed","inview","notinview"].forEach((function(t){return r.classList.toggle(t,"passed"===t?n:"inview"===t?e:!e)}))}))}))}),{root:null,rootMargin:"0px",threshold:parseFloat(e)});n.forEach((function(r){return a.observe(r)}))}))};